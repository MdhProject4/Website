@using Microsoft.AspNetCore.Http
@using ProjectFlight.Controllers
@using ProjectFlight.Data
@using ProjectFlight.Managers
@{
    ViewData["Title"] = "Home Page";

	// Get HttpContext from controller
	var httpContext = (HttpContext) Model;

	// Try to find currently logged in user
	User user = null;
	if (httpContext.User.Claims.Any())
	{
		user = SessionManager.GetUser(httpContext);
	}
	var signedIn = user != null;

	// SVGs to make the HTML cleaner
	const string svgDefault = "M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z";
	const string svgUser    = "M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z";
	const string svgClose   = "M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z";
	const string svgFilter  = "M6,13H18V11H6M3,6V8H21V6M10,18H14V16H10V18Z";
}

<div id="mapContainer">
	<!-- Search box -->
	<div id="search">
		<!-- TEST  -->
		<div id="searchKlick">
			<span style="font-size:30px;cursor:pointer; color:black" onclick="openNavmenu()">&#9776;Search</span>
		</div>
		<div class="sidenavmenu" id="mySidenavmenu">
			<a href="#" onclick="closeNav()" style="position:relative; top:-57px; right:-300px;">X</a>
			<br>
			<form action="#" onsubmit="getFlight(); return false;">
				<input id="searchInput2" placeholder="Enter FlightID or Registration Number..." type="text">
			</form>
			<table class="table table-bordered">
				<tbody id="DataSearching">
				<tr>
					<td class="Bold">ID:</td>
					<td id="tableId"></td>
				</tr>
				<tr>
					<td class="Bold">Registration Number:</td>
					<td id="tableRegNum"></td>
				</tr>
				<tr>
					<td class="Bold">Departure:</td>
					<td id="tableDeparture"></td>
				</tr>
				<tr>
					<td class="Bold">Destination:</td>
					<td id="tableDestination"></td>
				</tr>

				<tr>
					<td class="Bold">Flight Model:</td>
					<td id="tableFlightModel"></td>
				</tr>
				<tr>
					<td class="Bold">Manufacturer:</td>
					<td id="tableManufacture"></td>
				</tr>
				<tr>
					<td class="Bold">Year:</td>
					<td id="tableYear"></td>
				</tr>
				<tr>
					<td class="Bold">Operator:</td>
					<td id="tableOperator"></td>
				</tr>
				<tr>
					<td class="Bold">In Air:</td>
					<td id="tableInAir"></td>
				</tr>
				</tbody>
			</table>
		</div>
	</div>
	<!-- User button -->
	<div id="btnUser" class="control">
		<div id="btnUserIcon" onclick="@if (signedIn) {
										   // Semicolon here to fix a warning
			                               @:showAccount(true);
		                               } else {
										   @:showLogin(true);
		                               }">
			<svg viewBox="0 0 24 24">
				<path fill="#666666" d="@svgUser" />
			</svg>
		</div>
		<div id="btnUserError"> ¯\_(ツ)_/¯ </div>
		<div id="btnUserLogin">
			<table>
				<tr>
					<td>Username</td>
					<td><input id="loginUsername" type="text"></td>
				</tr>
				<tr>
					<td>Password</td>
					<td><input id="loginPassword" type="password"></td>
				</tr>
			</table>
			<span class="btnUserOption" onclick="showRegister(true)">No account? Create one!</span>
			<div class="buttonContainer">
				<div class="button" onclick="showLogin(false)">Cancel</div>
				<div class="button" onclick="login()">Login</div>
			</div>
		</div>
		<div id="btnUserRegister">
			<table>
				<tr>
					<td>Username</td>
					<td><input id="registerUsername" type="text"></td>
				</tr>
				<tr>
					<td>Password</td>
					<td><input id="registerPassword" type="password"></td>
				</tr>
				<tr>
					<td>Email (optional)</td>
					<td><input id="registerMail" type="email"></td>
				</tr>
			</table>
			<span class="btnUserOption" onclick="showRegister(false)">Have an account? Login!</span>
			<div class="buttonContainer">
				<div class="button" onclick="showLogin(false)">Cancel</div>
				<div class="button" onclick="register()">Register</div>
			</div>
		</div>
		<div id="btnUserAccount">
			<!-- Top bar with icons -->
			<div id="accountOptions">
				<!-- Notifications icon -->
				<div class="accOption" onclick="setAccountTab(0)">
					<svg viewBox="0 0 24 24">
						<path id="accNotificationsIcon" fill="#666666" d="@svgDefault"/>
					</svg>
				</div>
				<!-- Bookmarks icon -->
				<div class="accOption" onclick="setAccountTab(1)">
					<svg viewBox="0 0 24 24">
						<path id="accBookmarksIcon" fill="#666666" d="@svgDefault" />
					</svg>
				</div>
				<!-- Settings icon -->
				<div class="accOption" onclick="setAccountTab(2)">
					<svg viewBox="0 0 24 24">
						<path id="accSettingsIcon" fill="#666666" d="@svgDefault"/>
					</svg>
				</div>
				<!-- Close icon -->
				<div class="accOption" onclick="showAccount(false)">
					<svg viewBox="0 0 24 24">
						<path fill="#666666" d="@svgClose"/>
					</svg>
				</div>
			</div>
			<!-- Notifications -->
			<div id="accountNotifications" class="accTabContent"></div>
			<!-- Bookmarks -->
			<div id="accountBookmarks" class="accTabContent">
				<span class="accInfo"> No bookmarks :( </span>
			</div>
			<!-- Settings -->
			<div id="accountSettings" class="accTabContent">
				<span class="accInfo">
					Welcome @user?.Username! <br>
					@(user?.IsPremium ?? false ? "Premium" : "Free") account <br> <br>
					<span id="accLogout" onclick="logout()"> Get me out of here </span>
				</span>
			</div>
		</div>
	</div>
	<div id="btnFilter" class="control">
		<div id="btnFilterIcon" onclick="showFilter(true)">
			<svg viewBox="0 0 24 24">
				<path fill="#666666" d="@svgFilter" />
			</svg>
		</div>
		<div id="filterOptions">
			<div id="filterOpt">
				<input id="optDepDest" type="checkbox" checked>
				<label for="optDepDest">Known departure and destination</label>

				<input id="optRecent" type="checkbox" checked>
				<label for="optRecent">Updated recently</label>

				<input id="optToday" type="checkbox" checked>
				<label for="optToday">Added today</label>

				<input id="optInAir" type="checkbox" checked>
				<label for="optInAir">In the air</label>
			</div>

			<table id="filterPlaneLimit">
				<tr>
					<td id="filterMessage" colspan="2">See you on the other side</td>
				</tr>
				<tr>
					<td> Plane limit </td>
					<td> <input id="optPlaneLimit" type="number" value="50" min="1" max="1000"> </td>
				</tr>
			</table>
			
			<select id="optFilterQuery">
				<option selected>All</option>
				@foreach (var country in HomeController.GetCountries())
				{
					<option>@country</option>
				}
			</select>

			<div class="button" onclick="showFilter(false)">Save</div>
		</div>
	</div>
	<dív id="map"></dív>
</div>

<div id="logo">
	<img src="img/logo.png">
	<span> Flying Cats: Flight Tracker </span>
</div>

<script>
	let map, places
	let planes = []

	// Loads the map after the Google API finishes loading
	function loadMap()
	{
		map = new window.google.maps.Map(window.map,
			{
				// MDH location
				center: {
					lat: 59.618706,
					lng: 16.540438
				},
				zoom: 8,
				disableDefaultUI: true
			})

		places = new window.google.maps.places.PlacesService(map)

		getFlights()
	}

	// Adds a plane and draws it on the map
	function addPlane(plane, color)
	{
		// If not set, default to white
		if (!color) {
			color = "#ffffff"
		}

		// Create the info window for when clicking on the marker
		const infoWindow = new window.google.maps.InfoWindow({
			content: `
						<div class="flightInfoWindow">
							<table>
								<tr>
									<td class="infoTitle"> ID: </td>
									<td> ${plane.id} </td>
								</tr>
								<tr>
									<td class="infoTitle"> Added: </td>
									<td> ${plane.firstSeenString} </td>
								</tr>
								<tr>
									<td class="infoTitle"> Speed: </td>
									<td> ${Math.round(plane.speedKm)} km/h </td>
								</tr>
								<tr>
									<td class="infoTitle"> Vertical speed: </td>
									<td> ${plane.verticalSpeedM} m/s </td>
								</tr>
								<tr>
									<td class="infoTitle"> Model: </td>
									<td> ${plane.modelDescription} </td>
								</tr>
								<tr>
									<td class="infoTitle"> Remaining: </td>
									<td id="infoRemaining_${plane.id}"> ... </td>
								</tr>
							</table>
							<span class="infoPath"> ${plane.departureCity}, ${plane.departureCountry} -> ${plane.destinationCity}, ${plane.destinationCountry} </span>
							<div class="infoOptions">
								@if (signedIn)
								{
									<div title="Toggle notification" class="infoOptNotif" onclick="notifyPlane('${plane.id}')">
										<svg viewBox="0 0 24 24">
											<path id="infoOptNotif_${plane.id}" fill="#666666" d="${getSvgPath("bell-outline")}">
										</svg>
									</div>
									<div title="Toggle bookmark" class="infoOptSave" onclick="savePlane('${plane.id}')">
										<svg class="infoOptSave" viewBox="0 0 24 24">
											<path id="infoOptSave_${plane.id}" fill="#666666" d="${getSvgPath("bookmark-outline")}">
										</svg>
									</div>
								}
							</div>
						</div>
					`
		})


		// Create the marker itself
		const marker = new window.google.maps.Marker({
			position: {
				lat: plane.latitude,
				lng: plane.longitude
			},
			map: map,
			icon: {
				path: getSvgPath("airplane"),
				scale: 1.5,
				fillColor: color,
				fillOpacity: 1,
				strokeColor: "#000000",
				strokeWeight: 1,
				rotation: plane.angle
			},
			// ID of the plane used to update it later
			id: plane.id,
			// Departure and destination ID
			depId:  plane.departureId,
			destId: plane.destinationId
		})

		// Attach info window to marker
		marker.addListener("click", () => openInfoWindow(infoWindow, marker, plane))

		// Add marker to planes array
		planes.push(marker)
	}

	// Opens an airplane info window
	function openInfoWindow(infoWindow, marker, info)
	{
		// Open the info window itself
		infoWindow.open(map, marker)

		// Markers
		let from, to

		// Try to find airport locations
		searchPlace(info.departure)
			.then(response =>
			{
				response.id = info.departureId
				from = addAirport(getSvgPath("airplane-takeoff"), response)
			})
		searchPlace(info.destination)
			.then(response =>
			{
				response.id = info.destinationId
				to = addAirport(getSvgPath("airplane-landing"), response)
			})

		// Try to get estimated time remaining
		fetch(`/api/getFlightRemaining?id=${info.id}`)
			.then(response => response.json())
			.then(json =>
			{
				document.getElementById(`infoRemaining_${info.id}`).textContent = json.error ? "¯\\_(ツ)_/¯" : `${json.time} (${Math.round(json.distance)} km)`
			})

		// When the info window is closed, remove the icons
		infoWindow.addListener("closeclick", () =>
		{
			if (from) {
				from.setMap(null)
			}

			if (to) {
				to.setMap(null)
			}
		})
	}

	// Add airport marker
	function addAirport(path, info)
	{
		const infoWindow = new window.google.maps.InfoWindow({
			content:
				`
					<div class="flightInfoWindow">
						<span> ${info.id}: ${info.name} </span>
						@if (signedIn) {
							<div title="Toggle bookmark" class="infoOptSave" onclick="saveAirport('${info.id}')">
								<svg viewBox="0 0 24 24">
									<path id="infoOptAirport_${info.id}" fill="#666666" d="${getSvgPath("bookmark-outline")}">
								</svg>
							</div>
						}
					</div>
				`
		})

		const marker = new window.google.maps.Marker({
			position: {
				lat: info.lat,
				lng: info.lng
			},
			map: map,
			icon: {
				path: path,
				scale: 1.4,
				fillColor: "#ff9800",
				fillOpacity: 0.9,
				strokeColor: "#000000",
				strokeWeight: 0.9
			}
		})

		marker.addListener("click", () => infoWindow.open(map, marker))

		return marker
	}

	// Removes all planes known
	function removePlanes()
	{
		// Remove all planes from the map
		planes.forEach(plane => plane.setMap(null))
		// Empty the planes array
		planes.length = 0
	}

	// Shows or hides the login dialog
	function showLogin(show)
	{
		// Default back to login
		showRegister(false)

		// Hide error if any
		window.btnUserError.style.transform = "translate(0, -100%)"

		window.btnUserIcon.style.opacity = show ? 0 : 1
		window.btnUserLogin.style.transform = show ? "scale(1, 1)" : "scale(0, 0)"

		const style = window.btnUser.style

		style.top    = show ? "50%"   : "0"
		style.right  = show ? "50%"   : "0"
		style.width  = show ? "380px" : "40px"
		style.height = show ? "200px" : "40px"
		style.transform    = show ? "translate(50%, -50%)" : "translate(0, 0)"
		style.borderRadius = show ? "4px" : "2px"
	}

	// Shows user bookmarks, notifications and settings
	function showAccount(show)
	{
		window.btnUserIcon.style.opacity = show ? 0 : 1
		window.btnUserAccount.style.transform = show ? "scale(1, 1)" : "scale(0, 0)"

		const style = window.btnUser.style

		style.width  = show ? "256px" : "40px"
		style.height = show ? "256px" : "40px"
		style.borderRadius = show ? "4px" : "2px"

		// Default to 'notifications' being highlighted
		setAccountTab(0)
	}

	// Set tab selected in account (notifications, bookmarks, settings)
	function setAccountTab(index)
	{
		// Start by deselecting all of them
		window.accNotificationsIcon.setAttribute("d", getSvgPath("bell-outline"))
		window.accBookmarksIcon.setAttribute("d", getSvgPath("bookmark-outline"))
		window.accSettingsIcon.setAttribute("d", getSvgPath("settings-outline"))

		// Hide all tab contents
		window.accountNotifications.style.display = "none"
		window.accountBookmarks.style.display = "none"
		window.accountSettings.style.display = "none"

		// Update content
		updateAccountTab(index)

		// Then set the correct highlighted
		switch (index)
		{
			case 0:
				window.accNotificationsIcon.setAttribute("d", getSvgPath("bell"))
				window.accountNotifications.style.display = "block"
				break

			case 1:
				window.accBookmarksIcon.setAttribute("d", getSvgPath("bookmark"))
				window.accountBookmarks.style.display = "block"
				break

			case 2:
				window.accSettingsIcon.setAttribute("d", getSvgPath("settings"))
				window.accountSettings.style.display = "block"
				break
		}
	}

	// Update the content in the specific account tab
	function updateAccountTab(index)
	{
		switch (index)
		{
			case 0:
				removeChildren(window.accountNotifications)
				fetch("/user/getNotifications")
					.then(response => response.json())
					.then(json =>
					{
						if (json.length <= 0) {
							addText(window.accountNotifications, "No notifications :(", "accInfo")
						} else {
							json.forEach(item =>
							{
								fetch(`/api/getFlightRemaining?id=${item.flightId}`)
									.then(response => response.json())
									.then(json2 => addAccountNotification(item.flightId, json2.time))
							})
						}
                    })
                break
            case 1:
                removeChildren(window.accountBookmarks)
                fetch("/user/GetSavedFlights")
                    .then(response => response.json())
                    .then(json => {
                        if (json.length <= 0) {
                            addText(window.accountBookmarks, "No bookmarks :(", "accInfo")
                        } else {
                            json.forEach(item => {
                                (addAccountBookmark(item.id))
                                    
                            })
                        }
                    })
                break
		}
	}

	// Generic function to remove all children from an element
	function removeChildren(element)
	{
		while (element.firstChild) {
			element.removeChild(element.firstChild)
		}
	}

	// Adds a span of text to the parent element
	function addText(element, text, className)
	{
		const span = document.createElement("span")
		span.className = className
		span.textContent = text
		element.appendChild(span)
	}

	// Shows or hides the filter options
	function showFilter(show)
	{
		window.btnFilterIcon.style.opacity   = show ? 0 : 1
		window.filterOptions.style.transform = show ? "scale(1, 1)" : "scale(0, 0)"

		const style = window.btnFilter.style

		style.width  = show ? "256px" : "40px"
		style.height = show ? "278px" : "40px"
		style.borderRadius = show ? "4px" : "2px"

		// If we're closing filter options, apply changes
		if (!show) {
			overwriteFlights()
		}
	}

	// Tries to create an acccount
	function register()
	{
		// Get entered username, password and email
		const username = window.registerUsername.value
		const password = window.registerPassword.value
		const email    = window.registerMail.value

		// Check for require parameters
		if (!username) {
			showLoginError("Username required")
			return
		}

		if (!password) {
			showLoginError("Password required")
			return
		}

		// Try to register
		fetch(`/user/register?username=${username}&password=${password}&email=${email}`)
			.then(response => response.json())
			.then(json =>
			{
				// If error, assume username is taken
				if (json.error) {
					showLoginError("Username already taken")
				} else {
					showLoginStatus("Account created!")
					showRegister(false)
				}
			})
	}

	// Tries to login
	function login()
	{
		// Get entered username and password
		const username = window.loginUsername.value
		const password = window.loginPassword.value

		// Check for required parameters
		if (!username) {
			showLoginError("Username required")
			return
		}

		if (!password) {
			showLoginError("Password required")
			return
		}

		// Try to login
		fetch(`/user/login?username=${username}&password=${password}`)
			.then(response => response.json())
			.then(json => {
				// If error, assume username is taken
				if (json.error) {
					showLoginError("Incorrect username or password")
				} else {
					showLoginStatus("Login successful!")
					location.reload(true)
				}
			})
	}

	// Logs out
	function logout()
	{
		fetch("/user/logout")
			.then(() => location.reload(true))
	}

	// Shows the register or login dialog
	function showRegister(show)
	{
		window.btnUserLogin.style.transform    = show ? "scale(0, 0)" : "scale(1, 1)"
		window.btnUserRegister.style.transform = show ? "scale(1, 1)" : "scale(0, 0)"

		window.btnUser.style.height = show ? "240px" : "200px"
	}

	// Show error to login/register dialog
	const showLoginError = message => showLoginMessage(message, "#d32f2f")

	// Like showLoginError, but shows as a 'success' message
	const showLoginStatus = message => showLoginMessage(message, "#2e7d32")

	// Generic function to show login message
	function showLoginMessage(message, color)
	{
		window.btnUserError.textContent = message
		window.btnUserError.style.transform = "translate(0, 0)"
		window.btnUserError.style.backgroundColor = color

		// Automatically hide error after 3 seconds
		setTimeout(() => {
			window.btnUserError.style.transform = "translate(0, -100%)"
		}, 3000)
	}

	// Toggle plane notification
	function notifyPlane(id)
	{
		// Toggle notification
		fetch(`user/toggleNotification?id=${id}`)
			.then(response => response.json())
			.then(json =>
			{
				// Change icon (if shown) depending on if it was added or removed
				const icon = document.getElementById(`infoOptNotif_${id}`)
				if (icon) {
					icon.setAttribute("d", json.added ? getSvgPath("bell") : getSvgPath("bell-outline"))
				}

				// Refresh notifications
				updateAccountTab(0)
			})
			.catch(error => console.log(error))
	}

	// Toggle plane bookmark
    function savePlane(id)
    {
        // Toggle notification
        fetch(`user/ToggleFlight?id=${id}`)
            .then(response => response.json())
            .then(json => {
                // Change icon (if shown) depending on if it was added or removed
                const icon = document.getElementById(`infoOptSave_${id}`)
                if (icon) {
                    icon.setAttribute("d", json.added ? getSvgPath("bookmark") : getSvgPath("bookmark-outline"))
                }

                // Refresh notifications
                updateAccountTab(1)
            })
            .catch(error => console.log(error))
		// For now, just change the icon
		document.getElementById(`infoOptSave_${id}`).setAttribute("d", getSvgPath("bookmark"))
	}

	// Toggle airport bookmark
	function saveAirport(id)
	{
		// For now, just change the icon
		document.getElementById(`infoOptAirport_${id}`).setAttribute("d", getSvgPath("bookmark"))
	}

	// Add notification to account menu
	function addAccountNotification(id, time)
	{
		// Main notification container
		const notif = document.createElement("div")
		notif.className = "accNotification"

		// Plane icon
		const icPlane = document.createElement("img")
		icPlane.src = "/img/airplane-landing.svg"
		icPlane.addEventListener("click", () => getFlight(id, "#ffffff"))
		notif.appendChild(icPlane)

		// Text
		const info = document.createElement("span")
		info.innerHTML = `${id}<br>${time} remaining`
		notif.appendChild(info)

		// Delete icon
		const icDelete = document.createElement("img")
		icDelete.src = "/img/delete.svg"
		icDelete.addEventListener("click", () => notifyPlane(id))
		notif.appendChild(icDelete)

		// Add notification to container
		window.accountNotifications.appendChild(notif)
    }

    function addAccountBookmark(id) {
        // Main notification container
        const bookmark = document.createElement("div")
        bookmark.className = "accBookmark"

        // Plane icon
        const icBookmark = document.createElement("img")
        icBookmark.src = "/img/bookmark.svg"
        icBookmark.addEventListener("click", () => getFlight(id, "#ffffff"))
        bookmark.appendChild(icBookmark)

        // Text
        const info = document.createElement("span")
        info.innerHTML = `Plane:${id} <br> to  `
        bookmark.appendChild(info)

        // Delete icon
        const icDelete = document.createElement("img")
        icDelete.src = "/img/delete.svg"
        icDelete.addEventListener("click", () => notifyPlane(id))
        bookmark.appendChild(icDelete)

        // Add bookmark to container
        window.accountBookmarks.appendChild(bookmark)
    }

	// Neater way get svg paths
	function getSvgPath(icon)
	{
		switch (icon)
		{
			case "bell-outline":     return "M16,17H7V10.5C7,8 9,6 11.5,6C14,6 16,8 16,10.5M18,16V10.5C18,7.43 15.86,4.86 13,4.18V3.5A1.5,1.5 0 0,0 11.5,2A1.5,1.5 0 0,0 10,3.5V4.18C7.13,4.86 5,7.43 5,10.5V16L3,18V19H20V18M11.5,22A2,2 0 0,0 13.5,20H9.5A2,2 0 0,0 11.5,22Z"
			case "bell":             return "M21,19V20H3V19L5,17V11C5,7.9 7.03,5.17 10,4.29C10,4.19 10,4.1 10,4A2,2 0 0,1 12,2A2,2 0 0,1 14,4C14,4.1 14,4.19 14,4.29C16.97,5.17 19,7.9 19,11V17L21,19M14,21A2,2 0 0,1 12,23A2,2 0 0,1 10,21"
			case "bookmark-outline": return "M17,18L12,15.82L7,18V5H17M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z"
			case "bookmark":         return "M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z"
			case "airplane":         return "M21,16V14L13,9V3.5A1.5,1.5 0 0,0 11.5,2A1.5,1.5 0 0,0 10,3.5V9L2,14V16L10,13.5V19L8,20.5V22L11.5,21L15,22V20.5L13,19V13.5L21,16Z"
			case "airplane-takeoff": return "M2.5,19H21.5V21H2.5V19M22.07,9.64C21.86,8.84 21.03,8.36 20.23,8.58L14.92,10L8,3.57L6.09,4.08L10.23,11.25L5.26,12.58L3.29,11.04L1.84,11.43L3.66,14.59L4.43,15.92L6.03,15.5L11.34,14.07L15.69,12.91L21,11.5C21.81,11.26 22.28,10.44 22.07,9.64Z"
			case "airplane-landing": return "M2.5,19H21.5V21H2.5V19M9.68,13.27L14.03,14.43L19.34,15.85C20.14,16.06 20.96,15.59 21.18,14.79C21.39,14 20.92,13.17 20.12,12.95L14.81,11.53L12.05,2.5L10.12,2V10.28L5.15,8.95L4.22,6.63L2.77,6.24V11.41L4.37,11.84L9.68,13.27Z"
			case "arrow-up":         return "M2,20V22H22V20H13V5.83L18.5,11.33L19.92,9.92L12,2L4.08,9.92L5.5,11.33L11,5.83V20H2Z"
			case "arrow-down":       return "M19.92,12.08L12,20L4.08,12.08L5.5,10.67L11,16.17V2H13V16.17L18.5,10.66L19.92,12.08M12,20H2V22H22V20H12Z"
			case "delete":           return "M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"
			// o_O
			case "settings-outline": return "M19.43,12.97L21.54,14.63C21.73,14.78 21.78,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.03 19.05,18.95L16.56,17.94C16.04,18.34 15.5,18.67 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.78,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,12.97M6.5,12C6.5,12.58 6.59,13.13 6.75,13.66L4.68,15.36L5.43,16.66L7.95,15.72C8.69,16.53 9.68,17.12 10.8,17.37L11.24,20H12.74L13.18,17.37C14.3,17.13 15.3,16.54 16.05,15.73L18.56,16.67L19.31,15.37L17.24,13.67C17.41,13.14 17.5,12.58 17.5,12C17.5,11.43 17.41,10.87 17.25,10.35L19.31,8.66L18.56,7.36L16.06,8.29C15.31,7.47 14.31,6.88 13.19,6.63L12.75,4H11.25L10.81,6.63C9.69,6.88 8.69,7.47 7.94,8.29L5.44,7.35L4.69,8.65L6.75,10.35C6.59,10.87 6.5,11.43 6.5,12M12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5M12,10.5A1.5,1.5 0 0,0 10.5,12A1.5,1.5 0 0,0 12,13.5A1.5,1.5 0 0,0 13.5,12A1.5,1.5 0 0,0 12,10.5Z"
			case "settings":         return "M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"
			default: return null
		}
	}

	// Searches for a place and returns the coordinates
	function searchPlace(query)
	{
		const request = {
			query: query,
			fields: ["formatted_address", "geometry"]
		}

		return new Promise((resolve, reject) =>
		{
			places.findPlaceFromQuery(request, (results, status) =>
			{
				if (status !== window.google.maps.places.PlacesServiceStatus.OK) {
					reject("No results found")
				} else {
					resolve({
						name: results[0].formatted_address,
						lat: results[0].geometry.location.lat(),
						lng: results[0].geometry.location.lng()
					})
				}
			})
		})
	}

	// Test function to print result of searchPlace to the console
	function searchPlaceDebug(query)
	{
		searchPlace(query)
			.then(result => console.log(result))
	}

	// If we set the plane limit to something over 100, well, good luck
	window.optPlaneLimit.addEventListener("input", () => window.filterMessage.style.opacity = window.optPlaneLimit.value >= 100 ? 1 : 0)

	// Hide any dialogs when clicking/dragging the map
	window.map.addEventListener("mousedown", () => {
		// Hide login dialog
		@if (!signedIn)
		{
			@:showLogin(false)
		}
	})
</script>

<script>
	// Gets all flights and keeps them updated
	function getFlights()
	{
		// First, fill the map with initial planes
		overwriteFlights()

		// Every 5 seconds, update them
		setInterval(() =>
		{
			// Fetch new planes
			fetch(getFlightUrl())
				.then(response => response.json())
				.then(json =>
				{
					// Loop through all the new planes
					json.forEach(item =>
					{
						// Loop through all known planes to try and find a match to update
						planes.some(plane =>
						{
							if (plane.id === item.id) {
								// If it was found, update and return
								plane.setPosition({
									lat: item.latitude,
									lng: item.longitude
								})
								return true
							}
							// If not, continue searching
							return false
						})
					})
				})
		}, 5000)
	}

	// Overwrite all current planes, used during fist visit and when changing filters
	function overwriteFlights()
	{
		// Remove all existing planes
		removePlanes()

		// Fetch new flights and fill the map
		fetch(getFlightUrl())
			.then(response => response.json())
			.then(json => json.forEach(item => addPlane(item)))
	}

	// Gets all filter options, the url and stuffs
	function getFlightUrl()
	{
		// Get filter options
		const opt = getFilterOptions()

		// Return parsed url
		return `/api/getFlights?limit=${opt.limit}&depDest=${opt.depDest}&recent=${opt.recent}&today=${opt.today}&inAir=${opt.inAir}&query=${opt.filter}`
	}

	// Get filter options
	function getFilterOptions()
	{
		return {
			depDest: window.optDepDest.checked,
			recent:  window.optRecent.checked,
			today:   window.optToday.checked,
			inAir:   window.optInAir.checked,
			limit:   window.optPlaneLimit.value,
			filter:  window.optFilterQuery.value === "All" ? "" : window.optFilterQuery.value
		}
	}
</script>

<script>
	// Hides the UI, used by the app since it provides its own
	function hideUi()
	{
		window.search.style.display    = "none"
		window.btnUser.style.display   = "none"
		window.btnFilter.style.display = "none"
	}
</script>

<script>
	// Open side search menu
	function openNavmenu()
	{
		document.getElementById("mySidenavmenu").style.width    = "370px"
		document.getElementById("searchKlick").style.visibility = "hidden"
	}

	// Close side search menu
	function closeNav()
	{
		document.getElementById("mySidenavmenu").style.width    = "0"
		document.getElementById("searchKlick").style.visibility = "visible"
	}
</script>

<script>
	// Locate a specific plane on the map
	function getFlight(id, color)
	{
		// If not set, default to text entered in search input
		if (!id) {
			id = document.getElementById("searchInput2").value.trim()
		}

		// If not set, default to red
		if (!color) {
			color = "#ef5350"
		}

		for (let i = 0; i < planes.length; i++) {
			if (planes[i].icon.fillColor === "#ef5350") {
				const icon = planes[i].getIcon()
				icon.fillColor= "#ffffff"
				planes[i].setIcon(icon)
				break
			}
		}

		if (id.length === 0) {
			clearSidebarInfo()
			return
		}

		fetch(`/api/getFlight?id=${id}`)
			.then(response => response.json())
			.then(item => {
				if (!item.error)
				{
					document.getElementById('tableId').innerText          = item.info.id
					document.getElementById('tableRegNum').innerText      = item.info.registrationNumber
					document.getElementById('tableDeparture').innerText   = item.info.departure
					document.getElementById('tableDestination').innerText = item.info.destination
					document.getElementById('tableFlightModel').innerText = item.info.modelDescription
					document.getElementById('tableManufacture').innerText = item.info.manufacturer
					document.getElementById('tableYear').innerText        = item.info.year
					document.getElementById('tableOperator').innerText    = item.info.operator
					document.getElementById('tableInAir').innerText       = item.info.grounded ? "No" : "Yes"

					for (let i = 0; i < planes.length; i++) {
						if (planes[i].id === id ) {
							const icon = planes[i].getIcon()
							icon.fillColor = color
							planes[i].setIcon(icon)
							continue
						}
					}

					map.setCenter(new window.google.maps.LatLng(item.info.latitude, item.info.longitude));
				}
				else
				{
					clearSidebarInfo()
				}
			});
			
		function clearSidebarInfo() {
			document.getElementById('tableId').innerText = ''
			document.getElementById('tableRegNum').innerText = ''
			document.getElementById('tableDeparture').innerText = ''
			document.getElementById('tableDestination').innerText = ''
			document.getElementById('tableFlightModel').innerText = ''
			document.getElementById('tableManufacture').innerText = ''
			document.getElementById('tableYear').innerText = ''
			document.getElementById('tableOperator').innerText = ''
			document.getElementById('tableInAir').innerText = ''
		}
	}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAkpoZuz2_DLFR81ISUwOcIXcLj_4097gY&libraries=places&callback=loadMap" async defer></script>